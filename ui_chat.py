import streamlit as st
import requests
import config as cons
import time
import re

st.set_page_config(page_title="Chat Demo", page_icon="", layout="wide")

def format_markdown(text):
    """
    Chu·∫©n h√≥a markdown ƒë·ªÉ hi·ªÉn th·ªã ƒë√∫ng format trong Streamlit
    """
    if not text:
        return text
    
    # Lo·∫°i b·ªè trailing spaces tr∆∞·ªõc \n
    text = re.sub(r'  +\n', '\n', text)
    
    # Chuy·ªÉn ƒë·ªïi c√°c d·∫•u bullet kh√¥ng chu·∫©n
    text = text.replace('‚Äì', '-')
    text = text.replace('‚Äî', '-')
    
    # CASE 1: "- Title ‚Ä¢ Sub-item" ‚Üí T√°ch th√†nh 2 d√≤ng
    # V√≠ d·ª•: "- Chu·∫©n ƒëo√°n‚Ä¢ Thi·∫øt b·ªã" ‚Üí "- Chu·∫©n ƒëo√°n\n  ‚Ä¢ Thi·∫øt b·ªã"
    text = re.sub(r'([-]\s*[^‚Ä¢\n]+?)\s*‚Ä¢\s*', r'\1\n  ‚Ä¢ ', text)
    
    # CASE 2: ƒê·∫£m b·∫£o c√≥ line break tr∆∞·ªõc m·ªói bullet point ch√≠nh (- ho·∫∑c ‚Ä¢)
    # Nh∆∞ng kh√¥ng th√™m n·∫øu ƒë√£ c√≥ line break
    text = re.sub(r'([^\n])(\n?[-‚Ä¢]\s+[A-Z√Ä-·ª∏])', lambda m: m.group(1) + '\n\n' + m.group(2).lstrip('\n'), text)
    
    # CASE 3: Sub-items (‚Ä¢ sau -) c·∫ßn indent
    lines = text.split('\n')
    formatted_lines = []
    in_subitem = False
    
    for i, line in enumerate(lines):
        stripped = line.lstrip()
        
        # Main bullet point v·ªõi -
        if stripped.startswith('- '):
            formatted_lines.append(line)
            in_subitem = True
        # Sub bullet point v·ªõi ‚Ä¢
        elif stripped.startswith('‚Ä¢ ') and in_subitem:
            # ƒê·∫£m b·∫£o indent 2 spaces
            formatted_lines.append('  ' + stripped)
        # D√≤ng b√¨nh th∆∞·ªùng ho·∫∑c continuation
        else:
            formatted_lines.append(line)
            # Reset n·∫øu g·∫∑p d√≤ng tr·ªëng ho·∫∑c main bullet m·ªõi
            if not stripped or stripped.startswith('- '):
                in_subitem = False
    
    text = '\n'.join(formatted_lines)

    # CASE 4: ƒê·∫£m b·∫£o heading in ƒë·∫≠m v√† list (- ho·∫∑c s·ªë) c√≥ line break r√µ r√†ng
    # V√≠ d·ª•: "**C√°c tr∆∞·ªùng h·ª£p:**\n\n- ..." thay v√¨ "**C√°c tr∆∞·ªùng h·ª£p:**- ..."
    text = re.sub(r'(\*\*.*?\*\*):\s*\n?(-|\d+\.)', r'\1:\n\n\2', text)
    
    # ƒê·∫£m b·∫£o c√≥ space sau bullet points
    text = re.sub(r'‚Ä¢([^\s])', r'‚Ä¢ \1', text)
    text = re.sub(r'^-([^\s])', r'- \1', text, flags=re.MULTILINE)
    
    # Lo·∫°i b·ªè qu√° nhi·ªÅu line breaks (t·ªëi ƒëa 2)
    text = re.sub(r'\n{3,}', '\n\n', text)
    
    # Lo·∫°i b·ªè spaces th·ª´a
    text = re.sub(r' {2,}', ' ', text)
    
    return text.strip()

def stream_markdown(response, placeholder):
    """
    Stream markdown v·ªõi formatting real-time
    """
    ai_message = ""
    last_update = time.time()
    update_interval = 0.08  # Update m·ªói 80ms
    chunk_count = 0
    
    for line in response.iter_lines(decode_unicode=True):
        if not line:
            continue
        if line.startswith("data: "):
            data = line.replace("data: ", "")
            if data == "[DONE]":
                break
            
            ai_message += data
            chunk_count += 1
            
            # Update UI theo interval ho·∫∑c sau khi c√≥ ƒë·ªß content
            current_time = time.time()
            if (current_time - last_update >= update_interval) or (chunk_count % 20 == 0):
                formatted = format_markdown(ai_message)
                placeholder.markdown(formatted)
                last_update = current_time
    
    # Render l·∫ßn cu·ªëi v·ªõi format ho√†n ch·ªânh
    formatted = format_markdown(ai_message)
    placeholder.markdown(formatted)
    
    return formatted

# =====================
# Layout chia 2 c·ªôt
# =====================
col1, col2 = st.columns([1, 2])

# ---------------------
# üìÇ B√™n tr√°i: Upload PDF
# ---------------------
with col1:
    st.header("Upload Data")

    uploaded_files = st.file_uploader(
        "Ch·ªçn file PDF ƒë·ªÉ insert v√†o Milvus",
        type=["pdf"],
        accept_multiple_files=True
    )

    if st.button("Insert to DB"):
        if uploaded_files:
            files = [("files", (f.name, f, "application/pdf")) for f in uploaded_files]
            try:
                response = requests.post(f"{cons.API_URL}/insert_pdfs/", files=files)
                if response.status_code == 200:
                    st.success(response.json())
                else:
                    st.error(f"L·ªói insert: {response.text}")
            except Exception as e:
                st.error(f"Error: {str(e)}")
        else:
            st.warning("Vui l√≤ng ch·ªçn √≠t nh·∫•t 1 file PDF")


# ---------------------
# üí¨ B√™n ph·∫£i: Chat UI
# ---------------------
with col2:
    st.header("Chatbot With OpenAI")

    # Kh·ªüi t·∫°o l·ªãch s·ª≠ chat
    if "messages" not in st.session_state:
        st.session_state.messages = []

    # Container ƒë·ªÉ hi·ªÉn th·ªã l·ªãch s·ª≠ chat
    chat_container = st.container()
    with chat_container:
        for msg in st.session_state.messages:
            with st.chat_message(msg["role"]):
                st.markdown(msg["content"])

    # S·ª≠ d·ª•ng st.chat_input() - n√≥ s·∫Ω t·ª± ƒë·ªông n·∫±m ·ªü d∆∞·ªõi c√πng
    user_input = st.chat_input("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n...")

    # X·ª≠ l√Ω khi user g·ª≠i tin nh·∫Øn
    if user_input:
        # Th√™m tin nh·∫Øn user v√†o l·ªãch s·ª≠
        st.session_state.messages.append({"role": "user", "content": user_input})
        
        # Hi·ªÉn th·ªã tin nh·∫Øn user
        with chat_container:
            with st.chat_message("user"):
                st.markdown(user_input)

        # G·ªçi API v√† hi·ªÉn th·ªã response
        with chat_container:
            with st.chat_message("assistant"):
                placeholder = st.empty()
                ai_message = ""
                buffer = ""

                try:
                    response = requests.post(
                        f"{cons.API_URL}/chat/stream",
                        json={"question": user_input},
                        stream=True,
                    )
                    # Stream Markdown tr·ª±c ti·∫øp
                    ai_message = stream_markdown(response, placeholder)

                except Exception as e:
                    ai_message = f"Error: {str(e)}"
                    placeholder.markdown(ai_message)

                # L∆∞u response v√†o l·ªãch s·ª≠
                st.session_state.messages.append({"role": "assistant", "content": ai_message})
        
        # Rerun ƒë·ªÉ c·∫≠p nh·∫≠t UI
        st.rerun()